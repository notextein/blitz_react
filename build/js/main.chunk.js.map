{"version":3,"file":"js/main.chunk.js","sources":["/Users/rv/work/blitz/src/index.css","/Users/rv/work/blitz/src/App.js","/Users/rv/work/blitz/src/component/AppAlert.js","/Users/rv/work/blitz/src/component/AppController.js","/Users/rv/work/blitz/src/component/PreviewFrame.js","/Users/rv/work/blitz/src/component/SelectPopover.js","/Users/rv/work/blitz/src/component/SideDrawer.js","/Users/rv/work/blitz/src/component/SimpleForm.js","/Users/rv/work/blitz/src/component/SimpleTable.js","/Users/rv/work/blitz/src/component/Spacer.js","webpack:///./src/index.css?e32c","/Users/rv/work/blitz/src/index.js","/Users/rv/work/blitz/src/module/core/CoreRouter.js","/Users/rv/work/blitz/src/module/core/CoreStyles.js","/Users/rv/work/blitz/src/module/core/HomeForm.js","/Users/rv/work/blitz/src/module/core/LoginForm.js","/Users/rv/work/blitz/src/module/core/NavigationForm.js","/Users/rv/work/blitz/src/module/core/Viewport.js","/Users/rv/work/blitz/src/module/proforma/ProformaAppForm.js","/Users/rv/work/blitz/src/module/proforma/ProformaRequestForm.js","/Users/rv/work/blitz/src/serviceWorker.js","/Users/rv/work/blitz/src/theme.js"],"sourcesContent":["exports = module.exports = require(\"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"body {\\n  margin: 0;\\n  padding: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Roboto\\\", \\\"Oxygen\\\",\\n    \\\"Ubuntu\\\", \\\"Cantarell\\\", \\\"Fira Sans\\\", \\\"Droid Sans\\\", \\\"Helvetica Neue\\\",\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \\\"Courier New\\\",\\n    monospace;\\n}\\n\", \"\"]);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { SnackbarProvider } from 'notistack';\nimport Viewport from '~app-src/module/core/Viewport';\n\nimport { ThemeProvider } from '@material-ui/styles';\nimport theme from '~app-src/theme';\n\nconst styles = {\n};\n\nclass App extends Component {  \n\n  render() {\n\n    return <ThemeProvider theme={theme}>\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n    <SnackbarProvider maxSnack={3}>\n    <div className=\"App\">\n      <Viewport></Viewport>\n    </div>\n    </SnackbarProvider>\n    </MuiPickersUtilsProvider>\n  </ThemeProvider>;\n  }\n}\n\nexport default withStyles(styles)(App);","import React, { useState, useEffect } from 'react';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nexport default function AppAlert({app, type}) {\r\n\r\n    const [state, setState] = React.useState({\r\n        open:false,\r\n        title:'Blitz',\r\n        message:'',\r\n        type:'ok',\r\n        callback: ()=>{}\r\n    });\r\n\r\n    const handleClose = (flag) => {\r\n        if(state.callback){\r\n            state.callback(flag);\r\n        }\r\n        setState({\r\n            title:'',\r\n            open:false,\r\n            message:'',\r\n            type:'ok',\r\n            callback: ()=>{}            \r\n        });\r\n    }\r\n\r\n    useEffect(()=>{\r\n        app.setAlertHandle({\r\n            alertState:state,\r\n            setAppAlert:setState\r\n        });\r\n    },[]);\r\n\r\n    return (\r\n        <Dialog\r\n        open={state.open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\">\r\n        <DialogTitle id=\"alert-dialog-title\">{state.title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {state.message}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          { state.type=='yesno' && <div><Button onClick={()=>{handleClose('yes')}} color=\"primary\" variant=\"contained\">Yes</Button> <Button onClick={()=>{handleClose('no')}} color=\"primary\" variant=\"contained\" autoFocus>No</Button></div> }\r\n          { state.type=='ok' && <Button onClick={()=>{handleClose('ok')}} color=\"primary\" variant=\"contained\" autoFocus>Ok</Button> }\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n\r\n}","export default class AppController {\r\n    static sharedInstance = AppController.sharedInstance == null ? new AppController() : this.sharedInstance;\r\n\r\n    constructor(){\r\n        if(global && !global.AppController){\r\n            global.AppController = AppController;\r\n        }\r\n        if(window && !window.AppController){\r\n            window.AppController = AppController;\r\n        }\r\n        this.appInstance = undefined;\r\n    }\r\n\r\n    static getInstance(){\r\n        return AppController.sharedInstance;\r\n    }\r\n\r\n    setApp(app) {\r\n        this.appInstance = app;\r\n        return app;\r\n    }\r\n\r\n    getApp(){\r\n        return this.appInstance;\r\n    }\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport Container from '@material-ui/core/Container';\r\n\r\nexport default function PreviewFrame({app, name, router, src, height, width}) {\r\n  const classes = app.getStyles();\r\n  const formName = name;\r\n  const ref = useRef();\r\n  const [state, setState] = useState({});\r\n  const control = app.createControl(ref,state);\r\n\r\n\r\n  useEffect(()=>{\r\n    app.registerForm(formName, control);\r\n    return () => {\r\n      app.unregisterForm(formName);\r\n    }\r\n  },[]); \r\n\r\n  return (\r\n    <Container component=\"main\" ref={ref}>\r\n        <iframe src={src} height={height} width={width} className={classes.previewFullWidth}/>\r\n    </Container>\r\n  );\r\n}","import React, {useState, useEffect} from 'react';\r\nimport useStateWithCallback from 'use-state-with-callback';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport BlockIcon from '@material-ui/icons/Block';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\n\r\nexport default function SelectPopover({app}) {\r\n    const classes = app.getStyles();\r\n\r\n    const defaultState = {\r\n        open: false,\r\n        type: '',\r\n        name: '',\r\n        value: '',\r\n        lastValue: '',\r\n        label: '',\r\n        selectedItem: null,\r\n        selectedItems: null,\r\n        multiSelect: false,\r\n        selectedIDs: {},\r\n        dataProvider: [],\r\n        setPopoverTarget: null,\r\n        setPopoverCancel: null,\r\n        selectData: null,\r\n        anchorEl: null,\r\n        spacing: 20\r\n    };\r\n\r\n    const notSelected = {};\r\n    const selectedIDName = {id:'popover-selected-item'};\r\n\r\n    const [state, setState] = useStateWithCallback({...defaultState}, (lastState) => {\r\n        app.popSelectHandle.state = lastState;\r\n    });\r\n    const [selectedIndex, setSelectedIndex] = useStateWithCallback(-1, (lastSelectedIndex) => {\r\n        if(lastSelectedIndex!=-1 && document){\r\n            var target = document.getElementById(selectedIDName.id);\r\n            if(target && target.scrollIntoView){\r\n                target.scrollIntoView();\r\n            }\r\n        }\r\n    });\r\n\r\n    const handleClose = () => {\r\n        if(state.setPopoverTarget){\r\n            state.setPopoverTarget('');\r\n        }\r\n        setSelectedIndex(-1);\r\n        setState({...defaultState, open:false, setPopoverCancel: state.setPopoverCancel});\r\n        app.delay(()=>{\r\n            if(state.setPopoverCancel)\r\n                state.setPopoverCancel(false);\r\n        });\r\n    }\r\n\r\n    useEffect(()=>{\r\n        app.setPopSelectHandle({\r\n            state:{...state},\r\n            setState:setState,\r\n            setSelectedIndex:setSelectedIndex,\r\n            handleClose:handleClose\r\n        });      \r\n    },[]);    \r\n    \r\n    const setValue = (value) => {\r\n        setState({ ...state, value: value });\r\n    }  \r\n    const handleChange = event => {\r\n        if(state.multiSelect){\r\n            setValue(event.target.value.trim());\r\n        }else{\r\n            setValue(event.target.value);\r\n        }\r\n        if(event.target.value!=''){\r\n            setSelectedIndex(0);\r\n        }else{\r\n            setSelectedIndex(-1);\r\n        }\r\n    };\r\n\r\n    const handleSelect = event => {\r\n        if(selectedIndex!=-1){\r\n            handleSelectItem(state.dataProvider.filter((option, index) => {\r\n                return (option.name.toLowerCase().indexOf(state.value.trim().toLowerCase())!=-1);\r\n            })[selectedIndex]);\r\n        }\r\n    };\r\n\r\n\r\n    const handleSubmit = event => {\r\n        if(!state.multiSelect && selectedIndex!=-1){\r\n            handleSelectItem(state.dataProvider.filter((option, index) => {\r\n                return (option.name.toLowerCase().indexOf(state.value.trim().toLowerCase())!=-1);\r\n            })[selectedIndex]);\r\n        }        \r\n        state.setPopoverCancel(true);\r\n        handleClose();\r\n    };\r\n\r\n    const handleSelectItem = (option) => {\r\n        if(state.multiSelect){\r\n            if(option){\r\n                if(state.selectedIDs[option.id]){\r\n                    delete state.selectedIDs[option.id];\r\n                }else{\r\n                    state.selectedIDs[option.id] = option;\r\n                }\r\n                var items = [];\r\n                var ids = [];\r\n                for(var i in state.selectedIDs){\r\n                    items.push(state.selectedIDs[i]);\r\n                    ids.push(i);\r\n                }\r\n                setState({\r\n                    ...state,\r\n                    value: state.value,\r\n                    selectedItem: option,\r\n                    selectedItems: items,\r\n                    selectedIDs: state.selectedIDs\r\n                });\r\n                state.selectData(state.name, ids, state.multiSelect);\r\n            }\r\n        }else{\r\n            if(option){\r\n                setState({\r\n                    ...state,\r\n                    value: option.id,\r\n                    selectedItem: option,\r\n                    selectedItems: null\r\n                });\r\n                state.selectData(state.name, [option]);\r\n            }\r\n            handleClose();\r\n        }\r\n    };\r\n\r\n    const clearSelectedItem = () => {\r\n        setState({\r\n            ...state,\r\n            value: '',\r\n            lastValue: '',\r\n            selectedIDs: {},\r\n            selectedItem: null,\r\n            selectedItems: null\r\n        });\r\n        setSelectedIndex(-1);\r\n        state.selectData(state.name, [], state.multiSelect);\r\n        state.setPopoverCancel(true);\r\n        handleClose();\r\n    };\r\n\r\n    const checkSelected = (option, index) => {\r\n        if(selectedIndex==-1){\r\n            if(option.id==state.lastValue){\r\n                setSelectedIndex(index);\r\n                return true;\r\n            }else{\r\n                return false;\r\n            }\r\n        }else{\r\n            return selectedIndex==index;\r\n        }\r\n    }\r\n\r\n    const makeSelectedID = (option, index) => {\r\n        if(checkSelected(option, index)){\r\n            return selectedIDName;\r\n        }else{\r\n            return notSelected;\r\n        }\r\n    }    \r\n\r\n    const getWidth = () => {\r\n        var minWidth = {};\r\n        if(state.anchorEl && state.anchorEl.getBoundingClientRect){\r\n            minWidth.minWidth = state.anchorEl.getBoundingClientRect().width - (defaultState.spacing);\r\n        }\r\n        return minWidth\r\n    }\r\n\r\n    return <div>\r\n      <Popover\r\n        id=\"popover-search\"\r\n        open={state.open}\r\n        anchorEl={state.anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n      >        \r\n        <div>\r\n            <form className={classes.paper} noValidate autoComplete=\"off\">\r\n            <TextField \r\n                id=\"popover-search\" \r\n                value={state.value}\r\n                label={state.label} \r\n                autoComplete=\"off\" \r\n                onChange={handleChange}\r\n                fullWidth \r\n                autoFocus\r\n                onKeyDown={(e) => {\r\n                    if(e.keyCode === 37){ //left\r\n                    }else if(e.keyCode === 39) { //right\r\n                    }else if(e.keyCode === 38) { //up\r\n                        var nextStep = selectedIndex-1;\r\n                        if(nextStep>=0){\r\n                            setSelectedIndex(nextStep);\r\n                        }\r\n                    }else if(e.keyCode === 40) { //down\r\n                        var nextStep = selectedIndex+1;\r\n                        var length = state.dataProvider.filter((option, index) => {\r\n                            return (option.name.toLowerCase().indexOf(state.value.trim().toLowerCase())!=-1);\r\n                        }).length;\r\n                        if(nextStep<length){\r\n                            setSelectedIndex(nextStep);\r\n                        }\r\n                    }else if(e.keyCode === 32) { //space\r\n                        if(state.multiSelect){\r\n                            handleSelect(e);\r\n                            e.preventDefault();\r\n                        }\r\n                    }else if(e.keyCode === 13) { //enter\r\n                        handleSubmit(e);\r\n                    }\r\n                  }}\r\n                InputProps={{\r\n                    style: getWidth(),\r\n                    startAdornment:<InputAdornment position=\"start\">\r\n                        <IconButton className={classes.lookupIconButton} aria-label=\"Clear Selected\" onClick={clearSelectedItem}>\r\n                            <RemoveCircleOutlineIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }}\r\n            />\r\n            </form>\r\n            <List style={{maxHeight: 200, overflow: 'auto'}}>\r\n                {\r\n                    state.dataProvider.filter((option, index) => {\r\n                        return (option.name.toLowerCase().indexOf(state.value.trim().toLowerCase())!=-1);\r\n                    }).map((option, index) => {\r\n                        return <MenuItem button key={option.id}\r\n                            selected={checkSelected(option, index)}\r\n                            onClick={()=>{\r\n                                handleSelectItem(option);\r\n                            }}>\r\n                            {\r\n                                state.multiSelect &&\r\n                                <ListItemIcon>\r\n                                <Checkbox\r\n                                  edge=\"start\"\r\n                                  checked={state.selectedIDs[option.id]!=undefined}\r\n                                  tabIndex={-1}\r\n                                  disableRipple\r\n                                  inputProps={{ 'aria-labelledby': option.id }}\r\n                                />\r\n                              </ListItemIcon>                                \r\n                            }\r\n                            <ListItemText {...makeSelectedID(option, index)} primary={option.name} />\r\n                        </MenuItem>\r\n                    })\r\n                }                \r\n            </List>\r\n        </div>\r\n        </Popover>\r\n    </div>;\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport useStateWithCallback from 'use-state-with-callback';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nexport default function SideDrawer({app}) {\r\n    const classes = app.getStyles();\r\n\r\n    const defaultState = {\r\n        open: false,\r\n        onRender: null,\r\n        onClose: null\r\n    };\r\n\r\n    const [state, setState] = useStateWithCallback({...defaultState},(lastState)=>{\r\n        app.sideHandle.lastState = lastState;\r\n    });\r\n\r\n    const handleClose = () => {\r\n        if(app.sideHandle.lastState.onClose) app.sideHandle.lastState.onClose();\r\n        setState({...defaultState});\r\n    }\r\n\r\n    useEffect(()=>{\r\n        app.setSideHandle({\r\n            state:state,\r\n            lastState:state,\r\n            setState:setState,\r\n            close:handleClose\r\n        });      \r\n    },[]);    \r\n\r\n    return <div>\r\n        <Drawer anchor=\"right\" open={state.open} onClose={handleClose}>\r\n            {state.onRender && state.onRender()}            \r\n        </Drawer>\r\n    </div>;\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport useStateWithCallback from 'use-state-with-callback';\r\nimport MaskedInput from 'react-text-mask';\r\nimport {\r\n  LinearProgress,\r\n  MenuItem,\r\n  TextField,\r\n  Input,\r\n  Grid,\r\n  Button,\r\n  FormControl,\r\n  Divider,\r\n  InputLabel,\r\n  FormGroup,\r\n  FormControlLabel,\r\n  FormHelperText,\r\n  Switch,\r\n  Checkbox,\r\n  InputAdornment,\r\n  IconButton,\r\n  Box,\r\n  Typography\r\n} from '@material-ui/core';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport ToggleOffIcon from '@material-ui/icons/ToggleOff';\r\nimport ToggleOnIcon from '@material-ui/icons/ToggleOn';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\r\n\r\nimport * as Yup from 'yup';\r\n\r\nexport default function SimpleForm({app, name, formKey, control, mapping, state, setState}) {\r\n    const classes = app.getStyles();\r\n    const formBag = {\r\n        name:name,\r\n        formKey:(formKey) ? formKey: app.makeKey(),\r\n        formRef:undefined,\r\n        initConfig:{}\r\n    };\r\n\r\n    const [rendered, setRendered] = useState(false);\r\n    const [refresh, setRefresh] = useStateWithCallback(true,(lastRefresh)=>{\r\n        if(lastRefresh==false){\r\n            setRefresh(true);\r\n        }\r\n    });\r\n    \r\n    const [isSubmitting, setSubmitting] = useState(false); \r\n    const [popoverTarget, setPopoverTarget] = useState('');\r\n    const [popoverCancel, setPopoverCancel] = useState(false);\r\n\r\n    const init = (type) => {\r\n        if(formBag.initConfig[type]){\r\n            return formBag.initConfig[type];\r\n        }\r\n\r\n        formBag.initConfig['errors'] = {};\r\n        formBag.initConfig['cacheDPData'] = {};\r\n        formBag.initConfig['checkDPData'] = {};\r\n        formBag.initConfig['selectedData'] = {};\r\n        formBag.initConfig['values'] = {};\r\n        formBag.initConfig['visibles'] = {};\r\n        formBag.initConfig['dataMap'] = {};\r\n        formBag.initConfig['disabled'] = {};\r\n        formBag.initConfig['files'] = {};\r\n\r\n        for(var i=0;i<mapping.fields.length;i++){\r\n            var field = mapping.fields[i];\r\n            formBag.initConfig['errors'][field.name] = '';\r\n            formBag.initConfig['disabled'][field.name] = (field.disabled) ? true:false;\r\n            formBag.initConfig['visibles'][field.name] = (field.visible==false) ? false:true;\r\n            if(field.cmp==='search'){\r\n                formBag.initConfig['cacheDPData'][field.name] = field;\r\n                formBag.initConfig['selectedData'][field.name] = [];\r\n            }else if(field.cmp==='checkbox' || field.cmp==='toggle'){\r\n                formBag.initConfig['checkDPData'][field.name] = field.dataProvider;\r\n            }else if(field.cmp=='fileupload'){\r\n                formBag.initConfig['files'][field.name] = field.name+'-file';\r\n            }\r\n            if(state){\r\n                if(!state[field.name]) state[field.name] = (field.value) ? field.value:'';\r\n            }else{\r\n                formBag.initConfig['values'][field.name] = (field.value) ? field.value:'';\r\n            }\r\n            if(field.dataProvider && field.dataProvider.length>0 && field.dataProvider[0].id){\r\n                formBag.initConfig['dataMap'][field.name] = {};\r\n                for(var j=0;j<field.dataProvider.length;j++){\r\n                    var option = field.dataProvider[j];\r\n                    formBag.initConfig['dataMap'][field.name][option.id] = option.name;\r\n                }\r\n            }            \r\n        }\r\n        if(state) formBag.initConfig['values'] = state;\r\n        return formBag.initConfig[type];\r\n    }\r\n\r\n    const [files, setFiles] = useStateWithCallback(()=>{\r\n        return init('files');\r\n    },(lastFiles)=>{\r\n        if(rendered){\r\n            app.getForm(name).cacheFormFiles(formBag.formKey, lastFiles);\r\n        }\r\n    });\r\n\r\n    const [visible, setVisible] = useStateWithCallback(()=>{\r\n        return init('visibles');\r\n    },(lastVisible)=>{\r\n        if(rendered){\r\n            app.getForm(name).cacheFormVisibles(formBag.formKey, lastVisible);\r\n        }\r\n    });\r\n\r\n    const [disabled, setDisabled] = useStateWithCallback(()=>{\r\n        return init('disabled');\r\n    },(lastDisabled)=>{\r\n        if(rendered){\r\n            app.getForm(name).cacheFormDisabled(formBag.formKey, lastDisabled);\r\n        }\r\n    }); \r\n\r\n    const [errors, setErrors] = useStateWithCallback(()=>{\r\n        return init('errors');\r\n    },(lastErrors)=>{\r\n        if(rendered){\r\n            app.getForm(name).cacheFormErrors(formBag.formKey, lastErrors);\r\n        }\r\n    }); \r\n\r\n    const [cacheDPData, setCacheDPData] = useState(()=>{\r\n        return init('cacheDPData');\r\n    });\r\n\r\n    const [checkDPData, setCheckDPData] = useState(()=>{\r\n        return init('checkDPData');\r\n    });    \r\n\r\n    const [selectedData, setSelectedData] = useStateWithCallback(()=>{\r\n        return init('selectedData');\r\n    },(lastData)=>{\r\n        if(rendered){\r\n            app.getForm(name).cacheSelectedData(formBag.formKey, lastData);\r\n        }\r\n    });  \r\n\r\n    const [values, setValues] = useStateWithCallback(() => {\r\n        return init('values');\r\n    },(lastValues)=>{\r\n        if(rendered){\r\n            app.getForm(name).cacheFormValues(formBag.formKey, lastValues);\r\n            if(setState) setState(lastValues);\r\n        }\r\n    }); \r\n\r\n    const [dataMap, setDataMap] = useState(() => {\r\n        return init('dataMap');\r\n    });    \r\n\r\n    if(mapping.schema){\r\n        formBag.schema = Yup.object().shape(mapping.schema(Yup));\r\n    }else{\r\n        formBag.schema = Yup.object().shape({});\r\n    }\r\n    formBag.validateField = (fieldName, event) => {\r\n        var formValues = app.getForm(name).getValues(formBag.formKey);\r\n        var formErrors = app.getForm(name).getErrors(formBag.formKey);\r\n        try{\r\n            formBag.schema.validateSyncAt(fieldName, {[fieldName]:formValues[fieldName]});\r\n            setErrors({...formErrors, [fieldName]:''});\r\n        }catch(e){\r\n            setErrors({...formErrors, [fieldName]:e.message});\r\n        }\r\n    };\r\n    formBag.validate = (event) => {\r\n        var formValues = app.getForm(name).getValues(formBag.formKey);\r\n        var formErrors = app.getForm(name).getErrors(formBag.formKey);\r\n        for(var i in formValues){\r\n            try{\r\n                formBag.schema.validateSyncAt(i, {[i]:formValues[i]});\r\n                formErrors[i] = '';\r\n            }catch(e){\r\n                if(e.message.indexOf('The schema does not contain')==-1){\r\n                    formErrors[i] = e.message;\r\n                }\r\n            }\r\n        }\r\n        setErrors({...formErrors});\r\n    };    \r\n    formBag.isValid = (skipCascade) => {\r\n        var formValues = app.getForm(name).getValues(formBag.formKey);\r\n        var valid = formBag.schema.isValidSync(formValues);\r\n        if(!skipCascade){\r\n            try{\r\n                formBag.validate();\r\n            }catch(e){\r\n                console.log('errors',e);\r\n            }\r\n        }\r\n        return valid;\r\n    };\r\n    formBag.getFormData = (data) => {\r\n        var formData = new FormData();\r\n        var json = JSON.stringify(data);\r\n        formData.append('data', json);\r\n        for(var i in files){\r\n            var file = formBag.findRawField(files[i]);\r\n            if(file.files.length>0)\r\n                formData.append(i, file.files[0]);\r\n        }\r\n        return formData;\r\n    }\r\n    formBag.isSubmitting = isSubmitting;\r\n    formBag.setSubmitting = setSubmitting;\r\n    formBag.setDataMap = setDataMap;\r\n    formBag.dataMap = dataMap;\r\n\r\n    const handleSearchFocus = (field) => event => {\r\n        /*if(values[field.name]=='' && popoverTarget=='' && app.popSelectHandle && !app.popSelectHandle.open){\r\n            handleOnPopoverOpen(field, event);\r\n            setErrors({...errors, [field.name]:''});\r\n        }else{\r\n            if(app.popSelectHandle && app.popSelectHandle.handleClose){\r\n                app.popSelectHandle.handleClose();\r\n            }\r\n        }*/\r\n        setErrors({...errors, [field.name]:''});\r\n    };\r\n\r\n    const handleOnPopoverOpen = (field, event) => {\r\n        if(!popoverCancel){\r\n            setPopoverTarget(field.name); \r\n            setErrors({...errors, [field.name]:''}); \r\n            app.pop(\r\n                'lookup', \r\n                field.name, \r\n                field.label,\r\n                values[field.name], \r\n                field.dataProvider, \r\n                setPopoverTarget,\r\n                setPopoverCancel,\r\n                selectData,\r\n                field.multiple,\r\n                dataMap[field.name],\r\n                event.target\r\n            );\r\n        }\r\n    };\r\n\r\n    const handleFileUploadChange = (fieldName) => event => {\r\n        if(event.target.value && values[fieldName]==''){\r\n            setValue(fieldName,event.target.value);\r\n        }\r\n    };\r\n\r\n    const handleCheckBoxClick = (fieldName) => event => {\r\n        console.log(fieldName,event,event.target.checked);\r\n        if(isDisabled(fieldName)) return;\r\n        if(values[fieldName]=='') values[fieldName] = checkDPData[fieldName][0].id;\r\n        if(event.target.checked){\r\n            setValue(fieldName,checkDPData[fieldName][1].id);\r\n        }else{\r\n            setValue(fieldName,checkDPData[fieldName][0].id);\r\n        }\r\n    };\r\n\r\n    const handleFileUploadClick = (fieldName) => event => {\r\n        if(isDisabled(fieldName)) return;\r\n        var hiddenFileField = formBag.findRawField(fieldName+'-file');\r\n        hiddenFileField.click();\r\n    };\r\n\r\n    const handleClearErrors = (fieldName) => event => {\r\n        setErrors({...errors, [fieldName]:''});\r\n    };\r\n    const handleClearAllErrors = () => {\r\n        var emptyErrors = {};\r\n        var localErrors = formBag.initConfig['errors'];\r\n        for(var i in localErrors){\r\n            emptyErrors[i] = '';\r\n        }\r\n        setErrors(emptyErrors);\r\n    };\r\n    const handleClearSomeErrors = (data) => {\r\n        var emptyErrors = {};\r\n        var localErrors = formBag.initConfig['errors'];\r\n        for(var i in localErrors){\r\n            if(data[i])\r\n                emptyErrors[i] = '';\r\n        }\r\n        setErrors(emptyErrors);\r\n    };\r\n    const validateField = (form, fieldName, event) => {\r\n        if(popoverTarget!=fieldName)\r\n            form.validateField(fieldName, event);\r\n    };\r\n    const handleValidate = (form,fieldName) => event => {\r\n        validateField(form, fieldName, event);\r\n    };\r\n    const setValue = (fieldName, value) => {\r\n        setValues({ ...values, [fieldName]: value });\r\n    }\r\n    const handleDateChange = (fieldName, date) => {\r\n        console.log(fieldName, date);\r\n        setValue(fieldName, date);\r\n    }\r\n    const handleChange = fieldName => event => {\r\n        setValue(fieldName, event.target.value);\r\n    };\r\n    const handleSwitchChange = fieldName => event => {\r\n        var formValues = app.getForm(name).getValues(formBag.formKey);\r\n        setValue(fieldName, !formValues[fieldName]);\r\n    };\r\n    const handleSubmit = (event) => {\r\n        if(mapping.onSubmit){\r\n            setSubmitting(true);\r\n            mapping.onSubmit(app.getForm(name).getFormValues(formBag.formKey), formBag);\r\n        }\r\n    };\r\n    const selectData = (fieldName, records, multiple) => {\r\n        var formValues = app.getForm(name).getValues(formBag.formKey);\r\n        var selectedCache = app.getForm(name).getSelectedCache(formBag.formKey);\r\n        if(multiple){\r\n            if(records.length>0){\r\n                setValues({ ...formValues, [fieldName]: records });\r\n                setSelectedData({...selectedCache, [fieldName]:records});\r\n            }else{\r\n                setValues({ ...formValues, [fieldName]: [] });\r\n                setSelectedData({...selectedCache, [fieldName]:[]});\r\n            }\r\n        }else{\r\n            if(records.length>0){\r\n                setValues({ ...formValues, [fieldName]: records[0].id });\r\n                setSelectedData({...selectedCache, [fieldName]:records});\r\n            }else{\r\n                setValues({ ...formValues, [fieldName]: '' });\r\n                setSelectedData({...selectedCache, [fieldName]:[]});\r\n            }\r\n        }\r\n    };\r\n    const setVisibleField = (fieldName, flag) => {\r\n        setVisible({ ...(app.getForm(name).getVisibles(formBag.formKey)), [fieldName]: flag });\r\n    }\r\n    const setVisibles = (f) => {\r\n        var data = app.getForm(name).getVisibles(formBag.formKey);\r\n        var clr = {};\r\n        for(var i in f){\r\n            data[i] = f[i];\r\n            if(f[i]==true){\r\n                clr[i] = '';\r\n            }\r\n        }\r\n        setVisible(data);\r\n    }\r\n    const setAllVisible = (flag) => {\r\n        var data = app.getForm(name).getVisibles(formBag.formKey);\r\n        for(var i in data){\r\n            data[i] = flag;\r\n        }\r\n        setVisible(data);\r\n    }\r\n    const setDisabledField = (fieldName, flag) => {\r\n        setDisabled({ ...(app.getForm(name).getDisabled(formBag.formKey)), [fieldName]: flag });\r\n    }\r\n    const setDisables = (f) => {\r\n        var data = app.getForm(name).getDisabled(formBag.formKey);\r\n        var clr = {};\r\n        for(var i in f){\r\n            data[i] = f[i];\r\n            if(f[i]==true){\r\n                clr[i] = '';\r\n            }\r\n        }\r\n        setDisabled(data);\r\n        handleClearSomeErrors(clr);\r\n    }\r\n    const setAllDisabled = (flag) => {\r\n        var data = app.getForm(name).getDisabled(formBag.formKey);\r\n        for(var i in data){\r\n            data[i] = flag;\r\n        }\r\n        setDisabled(data);\r\n    }\r\n    const setExternalValue = (fieldName, value) => {\r\n        if(cacheDPData[fieldName]){\r\n            var field = cacheDPData[fieldName];\r\n            if(field.multiple){\r\n                var ids = value.split(',');\r\n                var keys = {};\r\n                for(var x=0;x<ids.length;x++){\r\n                    keys[ids[x].trim()] = true;\r\n                }\r\n                var selectIDs = [];\r\n                for(var i=0;i<field.dataProvider.length;i++){\r\n                    if(keys[field.dataProvider[i].id]){\r\n                        selectIDs.push(field.dataProvider[i].id);\r\n                    }\r\n                }\r\n                return selectData(fieldName, selectIDs, true);\r\n            }else{\r\n                for(var i=0;i<field.dataProvider.length;i++){\r\n                    if(field.dataProvider[i].id==value){\r\n                        return selectData(fieldName, [field.dataProvider[i]], false);\r\n                    }\r\n                }\r\n            }\r\n        }else{        \r\n            setValues({ ...(app.getForm(name).getValues(formBag.formKey)), [fieldName]: value });\r\n        }\r\n    };\r\n    const fns = (key) => {\r\n        return name+'-'+formKey+'-'+key;\r\n    };\r\n\r\n    const getError = (fieldName) => {\r\n        if(app.getForm(name)) return app.getForm(name).getError(formBag.formKey,fieldName);\r\n    };    \r\n    const isDisabled = (fieldName) => {\r\n        if(app.getForm(name)) return app.getForm(name).isDisabled(formBag.formKey,fieldName);\r\n    };\r\n    const isVisible = (fieldName) => {\r\n        if(app.getForm(name)) return app.getForm(name).isVisible(formBag.formKey,fieldName);\r\n    };\r\n    const boxVisible = (fieldName) => {\r\n        return visible[fieldName]==false ? classes.hiddenGridItem:{};\r\n    };\r\n    const colorIcon = (fieldName, color) => {\r\n        if(isDisabled(fieldName)){\r\n            return 'disabled';\r\n        }else{\r\n            return color;\r\n        }\r\n    };\r\n\r\n    formBag.refresh = () => {\r\n        setRefresh(false);\r\n    };\r\n    formBag.clearErrors = () => {\r\n        handleClearAllErrors();\r\n    };\r\n    formBag.setVisibles = (data) => {\r\n        setVisibles(data);\r\n    };\r\n    formBag.setVisible = (fieldName, flag) => {\r\n        setVisibleField(fieldName, flag);\r\n    };\r\n    formBag.show = (flag) => {\r\n        setAllVisible(flag);\r\n    };\r\n    formBag.setDisables = (data) => {\r\n        setDisables(data);\r\n    };\r\n    formBag.setDisabled = (fieldName, flag) => {\r\n        setDisabledField(fieldName, flag);\r\n    };\r\n    formBag.disable = (flag) => {\r\n        setAllDisabled(flag);\r\n    };\r\n    formBag.setValue = (fieldName, value) => {\r\n        setExternalValue(fieldName, value);\r\n    };\r\n    formBag.setValues = (data) => {\r\n        var formValues = app.getForm(name).getValues(formBag.formKey);\r\n        var selectedCache = app.getForm(name).getSelectedCache(formBag.formKey);\r\n        \r\n        for(var fieldName in data){\r\n            if(formValues[fieldName]!=undefined){\r\n                if(cacheDPData[fieldName]){\r\n                    var field = cacheDPData[fieldName];\r\n                    if(field.multiple){\r\n                        var ids = data[fieldName].split(',');\r\n                        var keys = {};\r\n                        for(var x=0;x<ids.length;x++){\r\n                            keys[ids[x].trim()] = true;\r\n                        }\r\n                        var selectIDs = [];\r\n                        for(var i=0;i<field.dataProvider.length;i++){\r\n                            if(keys[field.dataProvider[i].id]){\r\n                                selectIDs.push(field.dataProvider[i].id);\r\n                            }\r\n                        }\r\n                        if(selectIDs.length>0){\r\n                            formValues[fieldName] = selectIDs;\r\n                            selectedCache[fieldName] = selectIDs;\r\n                        }else{\r\n                            formValues[fieldName] = [];\r\n                            selectedCache[fieldName] = [];\r\n                        }\r\n                    }else{\r\n                        var selectedID = '';\r\n                        var selectedRow = [];\r\n                        for(var i=0;i<field.dataProvider.length;i++){\r\n                            if(field.dataProvider[i].id==data[fieldName]){\r\n                                selectedID = field.dataProvider[i].id;\r\n                                selectedRow = [field.dataProvider[i]];\r\n                                break;\r\n                            }\r\n                        }\r\n                        formValues[fieldName] = selectedID;\r\n                        selectedCache[fieldName] = selectedRow;\r\n                    }\r\n                }else{\r\n                    formValues[fieldName] = data[fieldName];\r\n                }\r\n            }\r\n        }\r\n        setValues({ ...formValues});\r\n        setSelectedData({...selectedCache});\r\n\r\n    };  \r\n    formBag.getValue = (fieldName) => {\r\n        return app.getForm(name).getValues(formBag.formKey)[fieldName];\r\n    };\r\n    formBag.getValues = () => {\r\n        return app.getForm(name).getValues(formBag.formKey);\r\n    };\r\n    formBag.reset = () => {\r\n        var formValues = app.getForm(name).getValues(formBag.formKey);\r\n        for(var i in formValues){\r\n            if(Array.isArray(formValues[i])){\r\n                formValues[i] = [];\r\n            }else{\r\n                formValues[i] = '';\r\n            }\r\n        }\r\n        setValues({...formValues});\r\n    };\r\n    formBag.submit = () => {\r\n        handleSubmit();\r\n    };\r\n    formBag.findRawField = (fieldName) => {\r\n        if(formBag.formRef && formBag.formRef.getElementsByTagName){\r\n            var elements = formBag.formRef.getElementsByTagName('input');\r\n            for(var i=0;i<elements.length;i++){\r\n                if(elements[i].name==fieldName){\r\n                    return elements[i];\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setRendered(true);\r\n        control.addForm(formBag);\r\n        return () => {\r\n        }\r\n    },[]);\r\n\r\n    return <form ref={(el) => (el) ? formBag.formRef = el : null}onSubmit={(event)=>{ event.preventDefault(); handleSubmit(event); }} noValidate autoComplete=\"off\">\r\n            {refresh &&\r\n            <Grid container spacing={2}>\r\n                {\r\n                    mapping.fields && mapping.fields.map((field, index) => {\r\n                        field.className = classes[field.cls];\r\n                        field.autoComplete = 'off'\r\n                        if(!field.variant){\r\n                            field.variant = 'standard';\r\n                        }\r\n                        if(field.fullWidth==undefined) field.fullWidth = true;\r\n                        if(field.type=='date' || field.type=='time' || field.type=='datetime-local' || field.type=='datetime'){\r\n                            field.InputLabelProps={\r\n                                shrink: true\r\n                            };\r\n                        }\r\n                        if(!field.grid){\r\n                            field.grid = {xs:12};\r\n                        }\r\n                        if(!field.grid.xs){\r\n                            field.grid.xs = 12;\r\n                        }\r\n                        if(field.cmp=='search'){\r\n                            var selectField = {...field};\r\n                            delete selectField.multiple;\r\n                            delete selectField.dataProvider;\r\n\r\n                            var selectProps = null;\r\n                            if(field.multiple){\r\n                                selectProps = {\r\n                                    open:false,\r\n                                    multiple: (field.multiple) ? true:false,\r\n                                    IconComponent:SearchIcon,\r\n                                    renderValue:(selected) => {\r\n                                        var list = [];\r\n                                        for(var i=0;i<selected.length;i++){\r\n                                            list.push(dataMap[field.name][selected[i]]);\r\n                                        }\r\n                                        return list.join(', ');\r\n                                    },\r\n                                    onOpen:(event)=>{\r\n                                        handleOnPopoverOpen(field, event);\r\n                                    }                                       \r\n                                };\r\n                            }else{\r\n                                selectProps = {\r\n                                    open:false,\r\n                                    multiple: false,\r\n                                    IconComponent:SearchIcon,\r\n                                    onOpen:(event)=>{\r\n                                        handleOnPopoverOpen(field, event);\r\n                                    }                                       \r\n                                };\r\n                            }\r\n\r\n                            var searchValue = undefined;\r\n                            if(cacheDPData[field.name]){\r\n                                if(field.multiple){\r\n                                    var ids = searchValue.split(',');\r\n                                    var keys = {};\r\n                                    for(var x=0;x<ids.length;x++){\r\n                                        keys[ids[x].trim()] = true;\r\n                                    }\r\n                                    var selectIDs = [];\r\n                                    for(var i=0;i<field.dataProvider.length;i++){\r\n                                        if(keys[field.dataProvider[i].id]){\r\n                                            selectIDs.push(field.dataProvider[i].id);\r\n                                        }\r\n                                    }\r\n                                    if(selectIDs.length>0){\r\n                                        searchValue = selectIDs;\r\n                                        selectedData[field.name] = selectIDs;\r\n                                    }else{\r\n                                        searchValue = [];\r\n                                        selectedData[field.name] = [];\r\n                                    }                                    \r\n                                }else{\r\n                                    var selectedID = '';\r\n                                    var selectedRow = [];\r\n                                    for(var i=0;i<field.dataProvider.length;i++){\r\n                                        if(field.dataProvider[i].id==values[field.name]){\r\n                                            selectedID = field.dataProvider[i].id;\r\n                                            selectedRow = [field.dataProvider[i]];\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    searchValue = selectedID;\r\n                                    selectedData[field.name] = selectedRow;\r\n                                }\r\n                                values[field.name] = searchValue;\r\n                            }\r\n\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} className={boxVisible(field.name)}>\r\n                                    <TextField\r\n                                        id={fns(field.name)}\r\n                                        {...selectField}\r\n                                        disabled={disabled[field.name]}\r\n                                        select\r\n                                        value={values[field.name]}\r\n                                        onBlur={handleValidate(formBag, field.name)}\r\n                                        error={getError(field.name)!=''}\r\n                                        helperText={getError(field.name)}\r\n                                        onFocus={handleSearchFocus(field)}\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        SelectProps={selectProps}>\r\n                                        {selectedData[field.name].map(option => (\r\n                                            <MenuItem key={fns(field.name)+'-'+option.id+'-option'} selected={option.id==values[field.name]} value={option.id}>{option.name}</MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                            </Grid>;\r\n                        }else if(field.cmp=='select'){\r\n                            var selectField = {...field};\r\n                            delete selectField.dataProvider;\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} className={boxVisible(field.name)}>\r\n                                    <TextField\r\n                                        id={fns(field.name)} {...selectField}\r\n                                        disabled={disabled[field.name]}\r\n                                        select\r\n                                        value={values[field.name]}\r\n                                        onChange={handleChange(field.name)}\r\n                                        onBlur={handleValidate(formBag, field.name)}\r\n                                        error={getError(field.name)!=''}\r\n                                        helperText={getError(field.name)}\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        onFocus={handleClearErrors(field.name)}>\r\n                                        {field.dataProvider.map(option => (\r\n                                            <MenuItem key={fns(field.name)+'-'+option.id+'-option'} value={option.id}>{option.name}</MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                            </Grid>;\r\n                        }else if(field.cmp=='fileupload'){\r\n                            var fileUploadField = {...field};\r\n                            delete fileUploadField.accept;\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} className={boxVisible(field.name)}>\r\n                                <input id={fns(field.name)+'-file'} name={field.name+'-file'} type=\"file\" accept={field.accept} className={classes.menuButtonHidden} onChange={handleFileUploadChange(field.name)}/>\r\n                                    <TextField\r\n                                        id={fns(field.name)}\r\n                                        {...fileUploadField}\r\n                                        disabled={disabled[field.name]}\r\n                                        value={values[field.name]}\r\n                                        onChange={handleChange(field.name)}\r\n                                        onBlur={handleValidate(formBag, field.name)}\r\n                                        error={getError(field.name)!=''}\r\n                                        helperText={getError(field.name)}\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        InputProps={{\r\n                                            readOnly:true,\r\n                                            endAdornment: (\r\n                                                <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    edge=\"end\"\r\n                                                    aria-label=\"select a file\" onClick={handleFileUploadClick(field.name)} disableFocusRipple={disabled[field.name]} disabled={disabled[field.name]} disableRipple={disabled[field.name]}>\r\n                                                    <AttachFileIcon color={colorIcon(field.name,'primary')}/>\r\n                                                </IconButton>\r\n                                                </InputAdornment>\r\n                                            )\r\n                                        }}\r\n                                        onFocus={handleClearErrors(field.name)}\r\n                                    />\r\n                            </Grid>;\r\n                        }else if(field.cmp=='checkbox'){\r\n                            var switchField = {...field};\r\n                            delete switchField.dataProvider;\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} className={boxVisible(field.name)}>\r\n                                    <TextField\r\n                                        id={fns(field.name)}\r\n                                        {...switchField}\r\n                                        disabled={disabled[field.name]}\r\n                                        value={values[field.name]}\r\n                                        onChange={handleChange(field.name)}\r\n                                        error={getError(field.name)!=''}\r\n                                        helperText={getError(field.name)}\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        InputProps={{\r\n                                            readOnly:true,\r\n                                            endAdornment: (\r\n                                                <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    edge=\"end\"\r\n                                                    aria-label=\"checkbox\" onClick={handleCheckBoxClick(field.name)} disabled={disabled[field.name]} disableRipple={disabled[field.name]}>\r\n                                                    {\r\n                                                        values[field.name]==checkDPData[field.name][1].id ? <CheckBoxIcon color={colorIcon(field.name,'primary')}/> : <CheckBoxOutlineBlankIcon color={colorIcon(field.name,'primary')}/>\r\n                                                    }\r\n                                                </IconButton>\r\n                                                </InputAdornment>\r\n                                            )\r\n                                        }}\r\n                                        onFocus={handleClearErrors(field.name)}\r\n                                    />\r\n                            </Grid>;                               \r\n                        }else if(field.cmp=='toggle'){\r\n                            var switchField = {...field};\r\n                            delete switchField.dataProvider;\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} className={boxVisible(field.name)}>\r\n                                    <TextField\r\n                                        id={fns(field.name)}\r\n                                        {...switchField}\r\n                                        disabled={disabled[field.name]}\r\n                                        value={values[field.name]}\r\n                                        onChange={handleChange(field.name)}\r\n                                        error={getError(field.name)!=''}\r\n                                        helperText={getError(field.name)}\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        InputProps={{\r\n                                            readOnly:true,\r\n                                            endAdornment: (\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <Switch \r\n                                                        disabled={disabled[field.name]} \r\n                                                        checked={values[field.name]==checkDPData[field.name][0].id} \r\n                                                        onChange={handleCheckBoxClick(field.name)} \r\n                                                        inputProps={{ 'aria-label': 'toggle' }}\r\n                                                        color={colorIcon(field.name,'primary')}\r\n                                                    /> \r\n                                                </InputAdornment>\r\n                                            )\r\n                                        }}\r\n                                        onFocus={handleClearErrors(field.name)}\r\n                                    />\r\n                            </Grid>;        \r\n                        }else if(field.cmp=='datepicker'){\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} className={boxVisible(field.name)}>\r\n                                    <KeyboardDatePicker\r\n                                        id={fns(field.name)}\r\n                                        {...field}\r\n                                        autoOk\r\n                                        disabled={disabled[field.name]}\r\n                                        value={values[field.name]}\r\n                                        error={getError(field.name)!=''}\r\n                                        helperText={getError(field.name)}\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        InputAdornmentProps={{ position: \"end\" }}\r\n                                        onChange={date => handleDateChange(field.name, date)}\r\n                                        onFocus={handleClearErrors(field.name)}\r\n                                    />                                \r\n                            </Grid>;        \r\n                        }else if(field.cmp=='hidden'){\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} style={{display:'none'}}><Input\r\n                                type=\"hidden\"\r\n                                value={values[field.name]}\r\n                                onChange={handleChange(field.name)}\r\n                            /></Grid>;\r\n                        }else if(field.cmp=='file' || field.cmp=='number' || field.cmp=='date' || field.cmp=='datetime-local' || field.cmp=='month' || field.cmp=='time' || field.cmp=='week'){\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} className={boxVisible(field.name)}>\r\n                                    <TextField\r\n                                        id={fns(field.name)}\r\n                                        {...field}\r\n                                        type={field.cmp}\r\n                                        disabled={disabled[field.name]}\r\n                                        value={values[field.name]}\r\n                                        onChange={handleChange(field.name)}\r\n                                        onBlur={handleValidate(formBag, field.name)}\r\n                                        error={getError(field.name)!=''}\r\n                                        helperText={getError(field.name)}\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        onFocus={handleClearErrors(field.name)}/>\r\n                            </Grid>;\r\n                        }else if(field.cmp=='inputmask'){\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} className={boxVisible(field.name)}>\r\n                                    <TextField\r\n                                        id={fns(field.name)}\r\n                                        {...field}\r\n                                        disabled={disabled[field.name]}\r\n                                        value={values[field.name]}\r\n                                        onChange={handleChange(field.name)}\r\n                                        onBlur={handleValidate(formBag, field.name)}\r\n                                        error={getError(field.name)!=''}\r\n                                        helperText={getError(field.name)}\r\n                                        InputProps={{\r\n                                            inputComponent:<MaskedInput mask={field.mask} placeholderChar={'\\u2000'} showMask/>\r\n                                        }}\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        onFocus={handleClearErrors(field.name)}/>\r\n                            </Grid>;\r\n                        }else if(field.cmp=='text'){\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} className={boxVisible(field.name)}>\r\n                                    <Input\r\n                                        type=\"hidden\"\r\n                                        value={values[field.name]}\r\n                                        onChange={handleChange(field.name)}\r\n                                    />\r\n                                    <Typography {...field}>{values[field.name]}</Typography>\r\n                            </Grid>;                            \r\n                        }else if(field.cmp=='button'){\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} className={boxVisible(field.name)}>\r\n                                    <Input\r\n                                        type=\"hidden\"\r\n                                        value={values[field.name]}\r\n                                        onChange={handleChange(field.name)}\r\n                                    />\r\n                                    <Button {...field} disabled={disabled[field.name]}>{values[field.name]}</Button>\r\n                            </Grid>;                                                      \r\n                        }else{\r\n                            return <Grid key={fns(field.name)+'-griditem'} item {...field.grid} className={boxVisible(field.name)}>\r\n                                    <TextField\r\n                                        id={fns(field.name)}\r\n                                        {...field}\r\n                                        disabled={disabled[field.name]}\r\n                                        value={values[field.name]}\r\n                                        onChange={handleChange(field.name)}\r\n                                        onBlur={handleValidate(formBag, field.name)}\r\n                                        error={getError(field.name)!=''}\r\n                                        helperText={getError(field.name)}\r\n                                        InputLabelProps={{shrink: true}}\r\n                                        onFocus={handleClearErrors(field.name)}/>\r\n                            </Grid>;\r\n                        }\r\n                    })\r\n                }\r\n                {formBag.isSubmitting && <Grid key={fns('line')+'-progress-griditem'} item xs={12}><LinearProgress /></Grid>}\r\n                {\r\n                    mapping.buttons && mapping.buttons.map((item, key) => {\r\n                        item.className = classes[item.cls];\r\n                        if(item.onClick){\r\n                            var clickEvent = item.onClick;\r\n                            item.onClick = () => {\r\n                                clickEvent(item.label,formBag);\r\n                            };\r\n                        }\r\n                        if(!item.grid){\r\n                            item.grid = {xs:12};\r\n                        }\r\n                        if(!item.grid.xs){\r\n                            item.grid.xs = 12;\r\n                        }                        \r\n                        if(item.fullWidth==undefined) item.fullWidth = true;\r\n\r\n                        return <Grid key={fns(item.label)+'-button-griditem'} item {...item.grid}><Button {...item} disabled={formBag.isSubmitting}>{item.label}</Button></Grid>;\r\n                    })\r\n                }\r\n        </Grid>      \r\n        }\r\n    </form>;\r\n\r\n}\r\n","import React, { forwardRef, useState, useEffect } from 'react';\r\nimport useStateWithCallback from 'use-state-with-callback';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport Save from '@material-ui/icons/Save';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nimport MaterialTable from \"material-table\";\r\n\r\nexport default function SimpleTable(props) {\r\n    const {tableKey, name, app, control, columns, data, options, actions} = props;\r\n    const tableProps = {...props};\r\n    delete tableProps.tableKey;\r\n    delete tableProps.name;\r\n    delete tableProps.app;\r\n    delete tableProps.control;\r\n\r\n    tableProps.title = '';\r\n    tableProps.options = { \r\n        ...props.options,\r\n        showTitle: false,\r\n        toolbar: false,\r\n        headerStyle: {\r\n            padding: 0,\r\n            margin: 0\r\n        }\r\n    };    \r\n\r\n    const classes = app.getStyles();\r\n    const tableBag = {\r\n        name:name,\r\n        tableKey:(tableKey) ? tableKey: app.makeKey()\r\n    };\r\n    \r\n    const tableIcons = {\r\n        Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n        Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n        Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n        Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n        DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n        Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n        Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n        Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n        FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n        LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n        NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n        PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n        ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n        Save: forwardRef((props, ref) => <Save {...props} ref={ref} />),\r\n        Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n        SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n        ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n        ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n    };\r\n\r\n    const aliasIcons = {\r\n        Add: AddBox,\r\n        Check: Check,\r\n        Clear: Clear,\r\n        Delete: DeleteOutline,\r\n        DetailPanel: ChevronRight,\r\n        Edit: Edit,\r\n        Export: SaveAlt,\r\n        Filter: FilterList,\r\n        FirstPage: FirstPage,\r\n        LastPage: LastPage,\r\n        NextPage: ChevronRight,\r\n        PreviousPage: ChevronLeft,\r\n        ResetSearch: Clear,\r\n        Save: Save,\r\n        Search: Search,\r\n        SortArrow: ArrowUpward,\r\n        ThirdStateCheck: Remove,\r\n        ViewColumn: ViewColumn\r\n    };    \r\n    const [rendered, setRendered] = useState(false);\r\n    const [refreshTable, setRefreshTable] = useStateWithCallback(true,(flag)=>{\r\n        if(rendered && flag==false){\r\n            console.log('redrawing...');\r\n            setRefreshTable(true);\r\n        }\r\n    });\r\n\r\n    if(actions){\r\n        // actions.map((action, index) => {\r\n        //     action.icon = aliasIcons[action.icon];\r\n        // });\r\n        // tableProps.actions = actions;\r\n    }\r\n\r\n    tableBag.tableRef = React.createRef();\r\n    tableBag.refresh = () => {\r\n        console.log('refresh called!');\r\n        if(tableBag.tableRef.current){\r\n            tableBag.tableRef.current.onQueryChange();\r\n        }else{\r\n            setRefreshTable(false);\r\n        }\r\n    };\r\n    \r\n    useEffect(()=>{\r\n        setRendered(true);\r\n        control.addTable(tableBag);\r\n        return () => {\r\n        }\r\n    },[]);\r\n\r\n    return <div>\r\n        {rendered && refreshTable && <MaterialTable tableRef={tableBag.tableRef} icons={tableIcons} {...tableProps}/>}\r\n    </div>;\r\n}","import React from 'react';\r\nexport default function Spacer(props) {\r\n    return <br/>;\r\n}","var content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-1!../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '~app-src/index.css';\nimport App from '~app-src/App';\nimport * as serviceWorker from '~app-src/serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect } from 'react';\r\n\r\nimport LoginForm from '~app-src/module/core/LoginForm';\r\nimport HomeForm from '~app-src/module/core/HomeForm';\r\n\r\nimport ProformaAppForm from '~app-src/module/proforma/ProformaAppForm';\r\n\r\nexport default class CoreRouter{\r\n    static sharedInstance = CoreRouter.sharedInstance == null ? new CoreRouter() : this.sharedInstance;\r\n\r\n    componentList = [\r\n        {\r\n            'path':'/',\r\n            'component':(app, router) => {\r\n                return <HomeForm name=\"app.core.HomeForm\" app={app} router={router}/>\r\n            }\r\n        },\r\n        {\r\n            'path':'/proforma/list',\r\n            'component':(app, router) => {\r\n                return <ProformaAppForm name=\"app.proforma.ProformaAppForm\" app={app} router={router}/>\r\n            }\r\n        }\r\n    ];\r\n\r\n    componentMap = {};\r\n\r\n    constructor(){\r\n        this.componentList.map((field, index) => {\r\n            this.componentMap[field.path] = field;\r\n        });\r\n    }\r\n\r\n    getComponent(isAuthenticated, field, app, router){\r\n        if(isAuthenticated){\r\n            return field.component(app, router);\r\n        }else{\r\n            return <LoginForm name=\"app.core.LoginForm\" app={app} router={router} />;\r\n        }\r\n    }\r\n\r\n    getPaths(){\r\n        return this.componentList;\r\n    }\r\n\r\n    static getInstance(){\r\n        return CoreRouter.sharedInstance;\r\n    }\r\n\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { red } from '@material-ui/core/colors';\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) =>{ \r\n\r\n  return ({\r\n    spacing: 0,\r\n    switchField: {\r\n      padding: 0,\r\n    },    \r\n    lookupDrawerList: {\r\n      width: 250,\r\n    },\r\n    lookupDrawerFullList: {\r\n        width: 'auto',\r\n    },\r\n    lookupIconButton: {\r\n      padding: 0,\r\n      margin: 0,\r\n      color: red[800]\r\n    },\r\n    lookupSearchField: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n    hiddenGridItem: {\r\n      display: 'none',\r\n    },     \r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    dotbox: {\r\n      width: '1px',\r\n      height: '1px',\r\n      overflow: 'hidden',\r\n    },\r\n    toolbar: {\r\n      paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: '0 8px',\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n      display: 'none',\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n      position: 'relative',\r\n      whiteSpace: 'nowrap',\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerPaperClose: {\r\n      overflowX: 'hidden',\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      width: theme.spacing(7),\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(9),\r\n      },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n      flexGrow: 1,\r\n      height: '100vh',\r\n      overflow: 'auto',\r\n    },\r\n    container: {\r\n      paddingTop: theme.spacing(2),\r\n      paddingBottom: theme.spacing(2),\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(1),\r\n      display: 'flex',\r\n      overflow: 'auto',\r\n      flexDirection: 'column',\r\n    },\r\n    paperCenter: {\r\n      padding: theme.spacing(1),\r\n      display: 'flex',\r\n      overflow: 'auto',\r\n      flexDirection: 'column',    \r\n      alignItems: 'center'\r\n    }, \r\n    fixedHeight: {\r\n      height: 240,\r\n    },\r\n    '@global': {\r\n      body: {\r\n        backgroundColor: theme.palette.common.white,\r\n      },\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main + ' !important',\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n    },    \r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    loginmedia: {\r\n      height: 200,\r\n    },    \r\n    bigAvatar: {\r\n      margin: 5,\r\n      width: '300px !important',\r\n      height: '150px !important',\r\n    },    \r\n    titlecard: {\r\n      maxWidth: 500,  \r\n    },\r\n    titlecardmedia: {\r\n      height: 300,\r\n    },\r\n    previewFullHeight: {\r\n      height: '90vh',\r\n      display: 'inline-block',\r\n      margin: '0 auto'\r\n    }   \r\n  });\r\n});\r\n\r\nexport default useStyles;","import React, { useEffect, useRef, useState } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Paper from \"@material-ui/core/Paper\";\nimport Spacer from '~app-src/component/Spacer';\n\nexport default function HomeForm({app, name, router}) {\n  const classes = app.getStyles();\n  const formName = name;\n  const ref = useRef();\n  const [state, setState] = useState({});\n  const control = app.createControl(ref,state,name);\n\n\n  useEffect(()=>{\n    app.registerForm(formName, control);\n    return () => {\n      app.unregisterForm(formName);\n    }\n  },[]); \n\n  return (\n    <Container component=\"main\" ref={ref}>\n      <Spacer/>\n      <Card className={classes.titlecard}>\n        <CardContent>\n          <CardMedia\n            className={classes.titlecardmedia}\n            image=\"/HerzoProforma/media/front-welcome.jpg\"\n            title=\"Proforma App\"\n          />\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              Welcome to the Custom Solutions Blitz Framework\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              A rapid application framework enabling developers to build robust systems\n              with full-stack capabilities with minimal coding and complexity.\n            </Typography>\n        </CardContent>\n        <CardActions>\n          <Button size=\"small\" color=\"primary\" onClick={()=>{router.history.push('/proforma/list')}}>\n            Start\n          </Button>\n        </CardActions>\n      </Card>          \n    </Container>\n  );\n}","import React, { useEffect, useRef, useState } from 'react';\nimport useStateWithCallback from 'use-state-with-callback';\nimport Avatar from '@material-ui/core/Avatar';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Container from '@material-ui/core/Container';\n\nimport SimpleForm from '~app-src/component/SimpleForm';\nimport Spacer from '~app-src/component/Spacer';\n\nimport Typography from '@material-ui/core/Typography';\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport Slide from '@material-ui/core/Slide';\n\nexport default function LoginForm({app, name, router}) {\n  const classes = app.getStyles();\n  const formName = name;\n  const ref = useRef();\n  const [enter, setEnter] = useState(false);\n  const [state, setState] = useState({});\n  const control = app.createControl(ref,state,formName);\n  useEffect(()=>{\n    let isSubscribed = true;\n    app.registerForm(formName, control);\n    app.delay(()=>{\n      if(isSubscribed){\n        setEnter(true);\n      }\n    },1000);\n    return () => {\n      isSubscribed = false;\n      app.unregisterForm(formName);\n    }\n  },[]); \n\n  return (\n    <Slide in={enter} direction=\"down\">\n    <Container component=\"main\" maxWidth=\"xs\" ref={ref}>\n      <Spacer/>\n      <Card className={classes.titlecard}>\n        <CardContent className={classes.paperCenter}>\n          <img className={classes.bigAvatar} src=\"/resources/pulse-logo.jpg\" alt=\"Pulse Feed\"/>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n\n          <SimpleForm\n            name={formName}\n            formKey=\"login-form\"\n            control={control}\n            app={app}\n            mapping={{\n              schema: (rule) => {\n                return {\n                  username: rule.string().required(),\n                  password: rule.string().required()\n                }\n              },\n              fields: [\n                {name:'username', label:'Username', cmp:'textfield', autoFocus:true},\n                {name:'password', label:'Password', cmp:'textfield', type:'password'}\n              ],\n              onSubmit: (values, formCtrl) => {\n                if(formCtrl.isValid()){\n                  app.setUser({\n\n                  });\n                  // app.service.post(\n                  //   '/login',\n                  //   {username:values.username, password:app.encrypt(values.password)},\n                  //   (p) => {\n                  //     formCtrl.setSubmitting(false);\n                  //     if(p.success){\n                  //       setEnter(false);\n                  //       app.delay(()=>{\n                  //         app.setUser(p.result.user);\n                  //       },500);                        \n                  //     }else{\n                  //       app.alert(p.message);\n                  //     }\n                  //   }\n\n                }else{\n                  //formCtrl.setSubmitting(false);\n                }\n                formCtrl.setSubmitting(false);\n              },\n              buttons: [\n                {type:'submit', label:'Login', variant:'contained', color:'primary'}\n              ]              \n            }}\n            state={state}\n            setState={setState}        \n          ></SimpleForm>\n        </CardContent>\n      </Card>       \n    </Container>\n    </Slide>\n  );\n}","import React from 'react';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\n\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nexport default function NavigationForm({app, router}) {\r\n\r\n  const classes = app.getStyles();\r\n\r\n  return (  \r\n    <div> \r\n      <List>\r\n        <ListItem button onClick={(e)=>{ router.history.push('/'); }}>\r\n          <ListItemIcon>\r\n            <HomeIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Home\" />\r\n        </ListItem>        \r\n        <Divider />        \r\n        <ListItem button onClick={(e)=>{ router.history.push('/proforma/list'); }}>\r\n          <ListItemIcon>\r\n            <ListAltIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Manage Content\" />\r\n        </ListItem> \r\n      </List>\r\n    </div>\r\n  );\r\n}","import React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { HashRouter, Route, Redirect } from 'react-router-dom'\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport EditIcon from '@material-ui/icons/Edit';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport SaveIcon from '@material-ui/icons/Save';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ViewColumnIcon from '@material-ui/icons/ViewColumn';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\n\n\nimport useStyles from '~app-src/module/core/CoreStyles';\n\nimport AppController from '~app-src/component/AppController';\nimport AppAlert from '~app-src/component/AppAlert';\nimport SideDrawer from '~app-src/component/SideDrawer';\nimport SelectPopover from '~app-src/component/SelectPopover';\nimport PreviewFrame from '~app-src/component/PreviewFrame';\n\nimport NavigationForm from '~app-src/module/core/NavigationForm';\nimport CoreRouter from '~app-src/module/core/CoreRouter';\n\nimport shortid from 'shortid';\n\nimport { useSnackbar } from 'notistack';\n\nimport CryptoJS from 'crypto-js';\nimport moment from 'moment';\n\nexport default function Viewport() {\n\n  const classes = useStyles();\n\n  const [rendered, setRendered] = React.useState(false);\n  const [appDrawerIsOpen, setAppDrawerIsOpen] = React.useState(false);\n  const [appIsAuthenticated, setAppIsAuthenticated] = React.useState(false);\n  const [appUser, setAppUser] = React.useState({'role_id':'g'});\n\n  const handleDrawerOpen = () => {\n    setAppDrawerIsOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setAppDrawerIsOpen(false);\n  };\n  const { enqueueSnackbar } = useSnackbar();\n  const pushNotice = (variant, message) => {\n    // variant could be success, error, warning, info, or default\n    enqueueSnackbar(message, { variant, autoHideDuration:2000, disableWindowBlurListener:true });\n  };\n\n  const appProp = (name, config) => {\n    if(AppController.getInstance() && AppController.getInstance().getApp() && AppController.getInstance().getApp()[name]){\n      return AppController.getInstance().getApp()[name];\n    }else{\n      return (config) ? config:{};\n    }\n  }\n\n  const app = AppController.getInstance().setApp({\n    forms:appProp('forms'),\n    controlCache:appProp('controlCache',{}),\n    stateCache:appProp('stateCache',{}),\n    alertHandle:appProp('alertHandle'),\n    sideHandle:appProp('sideHandle'),\n    popSelectHandle:appProp('popSelectHandle'),\n    icons:appProp('icons',{\n      Add: AddBoxIcon,\n      Assignment: AssignmentIcon,\n      Check: CheckIcon,\n      Clear: ClearIcon,\n      Delete: DeleteOutlineIcon,\n      DetailPanel: ChevronRightIcon,\n      Edit: EditIcon,\n      Export: SaveAltIcon,\n      Filter: FilterListIcon,\n      FirstPage: FirstPageIcon,\n      LastPage: LastPageIcon,\n      Menu: MenuIcon,\n      NextPage: ChevronRightIcon,\n      PictureAsPdf: PictureAsPdfIcon,\n      PreviousPage: ChevronLeftIcon,\n      ResetSearch: ClearIcon,\n      Save: SaveIcon,\n      Search: SearchIcon,\n      SortArrow: ArrowUpwardIcon,\n      ThirdStateCheck: RemoveIcon,\n      ViewColumn: ViewColumnIcon,\n      ViewList: ViewListIcon\n    }),\n    makeKey: () => {\n      return shortid.generate();\n    },\n    notice:{\n      success: (message) => {\n        pushNotice('success', message);\n      },\n      error: (message) => {\n        pushNotice('error', message);\n      },\n      warning: (message) => {\n        pushNotice('warning', message);\n      },\n      info: (message) => {\n        pushNotice('info', message);\n      }\n    },\n    createControl: (component, state, name) => {\n      if(name && app.controlCache[name]) return app.controlCache[name];\n      let _self = {\n        name: '',\n        component: component,\n        state: state,\n        tables:[],\n        values:{},\n        files:{},\n        visibles:{},\n        selectedCache:{},\n        errors:{},\n        disabled:{},\n        currentStep: '',\n        forms:[]\n      };\n      _self.findForm = (key) => {\n        for(var i=0;i<_self.forms.length;i++){\n          if(_self.forms[i].formKey==key){\n            return _self.forms[i];\n          }\n        }        \n      }\n      _self.findTable = (key) => {\n        for(var i=0;i<_self.tables.length;i++){\n          if(_self.tables[i].tableKey==key){\n            return _self.tables[i];\n          }\n        }        \n      }\n      var ctrl = {\n        setCurrentStep: (name) => {\n          _self.currentStep = name;\n        },\n        setName: (name) => {\n          _self.name = name;\n        },\n        getComponent: () => {\n          return _self.component;\n        },\n        addForm: (control) => {\n          for(var i=0;i<_self.forms.length;i++){\n            if(control.formKey==_self.forms[i].formKey){\n              _self.forms.splice(i,1);\n            }\n          }\n          _self.forms.push(control);\n        },\n        addTable: (control) => {\n          for(var i=0;i<_self.tables.length;i++){\n            if(control.tableKey==_self.tables[i].tableKey){\n              _self.tables.splice(i,1);\n            }\n          }          \n          _self.tables.push(control);\n        },\n        getForm: (index) => {\n          if(index==undefined){\n            index = 0;\n          }\n          return _self.forms[index];\n        },\n        getForms: () => {\n          return _self.forms;\n        },\n        findForm: (key) => {\n          return _self.findForm(key);\n        },\n        getTable: (index) => {\n          if(index==undefined){\n            index = 0;\n          }\n          return _self.tables[index];\n        },\n        getTables: () => {\n          return _self.tables;\n        },\n        findTable: (key) => {\n          return _self.findTable(key);\n        },\n        cacheFormFiles: (key, files) => {\n          _self.files[key] = files;\n        },\n        cacheFormValues: (key, values) => {\n          _self.values[key] = values;\n        },\n        cacheFormErrors: (key, errors) => {\n          _self.errors[key] = errors;\n        },\n        cacheFormVisibles: (key, data) => {\n          _self.visibles[key] = data;\n        },\n        cacheFormDisabled: (key, data) => {\n          _self.disabled[key] = data;\n        },\n        cacheSelectedData: (key, data) => {\n          _self.selectedCache[key] = data;\n        },\n        getSelectedCache: (key) => {\n          return _self.selectedCache[key];\n        },\n        getError: (key, fieldName) => {\n          if(_self.errors[key] && _self.errors[key][fieldName]){\n            return _self.errors[key][fieldName]\n          }else{\n            return '';\n          }\n        },\n        getDisabled: (key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0)\n            key = _self.forms[0].formKey;\n          return _self.disabled[key];\n        },        \n        isDisabled: (key, fieldName) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(_self.disabled[key] && _self.disabled[key][fieldName]){\n            return _self.disabled[key][fieldName]\n          }else{\n            return false;\n          }\n        },\n        getVisibles: (key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0)\n            key = _self.forms[0].formKey;\n          return _self.visibles[key];\n        },        \n        isVisible: (key, fieldName) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(_self.visibles[key] && _self.visibles[key][fieldName]){\n            return _self.visibles[key][fieldName]\n          }else{\n            return false;\n          }\n        },\n        getErrors: (key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0)\n            key = _self.forms[0].formKey;\n          return _self.errors[key];\n        },        \n        getValues: (key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0)\n            key = _self.forms[0].formKey;\n          return _self.values[key];\n        },\n        getFormValues: (key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0)\n            key = _self.forms[0].formKey;\n          var formValues = {..._self.values[key]};\n          for(var i in formValues){\n            if(Array.isArray(formValues[i])){\n              formValues[i] = formValues[i].join(',');\n            }\n          }\n          return formValues;\n        },\n        getFormData: (data, key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            return _self.forms[0].getFormData(data);\n          }else{\n            return _self.findForm(key).getFormData(data);\n          }\n        },        \n        getSearchValues: (key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0)\n            key = _self.forms[0].formKey;\n\n          var formValues = {..._self.values[key]};\n          for(var i in formValues){\n            if(Array.isArray(formValues[i])){\n              formValues[i] = formValues[i].join(',');\n            }\n            if(formValues[i].trim()==''){\n              delete formValues[i];\n            }\n          }\n          return formValues;\n        },\n        show: (flag, key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].show(flag);\n          }else{\n            _self.findForm(key).show(flag);\n          }\n        },        \n        setVisibles: (data, key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].setVisibles(data);\n          }else{\n            _self.findForm(key).setVisibles(data);\n          }\n        },\n        setVisible: (fieldName, flag, key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].setVisible(fieldName,flag);\n          }else{\n            _self.findForm(key).setVisible(fieldName,flag);\n          }\n        },\n        disable: (flag, key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].disable(flag);\n          }else{\n            _self.findForm(key).disable(flag);\n          }\n        },        \n        setDisables: (data, key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].setDisables(data);\n          }else{\n            _self.findForm(key).setDisables(data);\n          }\n        },        \n        setDisabled: (fieldName, flag, key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].setDisabled(fieldName,flag);\n          }else{\n            _self.findForm(key).setDisabled(fieldName,flag);\n          }\n        },\n        setValue: (fieldName, value, key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].setValue(fieldName,value);\n          }else{\n            _self.findForm(key).setValue(fieldName,value);\n          }\n        },\n        setValues: (values, key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].setValues(values);\n          }else{\n            _self.findForm(key).setValues(values);\n          }\n        },\n        clearErrors: (key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].clearErrors();\n          }else{\n            _self.findForm(key).clearErrors();\n          }\n        },         \n        refresh: (key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].refresh();\n          }else{\n            _self.findForm(key).refresh();\n          }\n        },          \n        reset: (key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].reset();\n          }else{\n            _self.findForm(key).reset();\n          }\n        },        \n        submit: (key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].submit();\n          }else{\n            _self.findForm(key).submit();\n          }\n        },\n        validate: (key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            _self.forms[0].validate();\n          }else{\n            _self.findForm(key).validate();\n          }\n        },\n        isValid: (flag, key) => {\n          if(!key && _self.currentStep && _self.currentStep!='') key = _self.currentStep;\n          if(!key && _self.forms.length>0){\n            return _self.forms[0].isValid(flag);\n          }else{\n            return _self.findForm(key).isValid(flag);\n          }\n        }  \n      };\n      if(name) app.controlCache[name] = ctrl;\n      return ctrl;\n    },\n    setStateCache: (key, values) => {\n      app.stateCache[key] = { ...app.stateCache[key], ...values };\n    },\n    getStateCache: (key) => {\n      return app.stateCache[key];\n    },    \n    setPopSelectHandle: (handle) => {\n      app.popSelectHandle = handle;\n    },    \n    setAlertHandle: (handle) => {\n      app.alertHandle = handle;\n    },\n    setSideHandle: (handle) => {\n      app.sideHandle = handle;\n    },     \n    registerForm: (name, component) => {\n      AppController.getInstance().getApp().forms[name] = component;\n      console.log('loaded:',name,app.forms[name]);\n      app.forms[name].setName(name);\n      return app.forms[name];\n    },\n    getForm: (name) => {\n      if(AppController.getInstance().getApp().forms[name])\n        return app.forms[name];\n    },\n    unregisterForm: (name) => {\n      console.log('unloaded:',name);\n      delete AppController.getInstance().getApp().forms[name];\n    },\n    moment: moment,\n    service:{\n      promise:(callback)=>{\n        return new Promise((resolve, reject) => {\n          callback(resolve, reject);\n        });\n      },\n      get: (path, callback) => {\n        fetch(window.BASE_APP_PATH+path)\n        .then((res) => {\n          try{\n            return res.json()\n          }catch(e){\n            return {\n              success:false,\n              message:e.message,\n              result:e\n            };\n          }\n        })\n        .then((p) => {\n          callback(p);\n        });\n      },\n      post: (path, data, callback) => {\n        fetch(window.BASE_APP_PATH+path, {\n            method: 'POST',\n            mode: 'same-origin',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            redirect: 'follow',\n            referrer: 'no-referrer',\n            body: JSON.stringify(data),\n        })\n        .then((res) => {\n          try{\n            return res.json()\n          }catch(e){\n            return {\n              success:false,\n              message:e.message,\n              result:e\n            };\n          }\n        })\n        .then((p) => {\n          callback(p);\n        });\n      },\n      upload: (path, data, callback) => {\n        fetch(window.BASE_APP_PATH+path, {\n            method: 'POST',\n            mode: 'same-origin',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'multipart/form-data boundary=' + Math.random().toString().substr(2),\n            },\n            redirect: 'follow',\n            referrer: 'no-referrer',\n            body: data,\n        })\n        .then((res) => {\n          try{\n            return res.json()\n          }catch(e){\n            return {\n              success:false,\n              message:e.message,\n              result:e\n            };\n          }\n        })\n        .then((p) => {\n          callback(p);\n        });\n      },      \n      download: (path, data) => {\n        const link = document.createElement('a');\n        var url = window.BASE_APP_PATH+path;\n        if(data){\n          url = url+'?data='+JSON.stringify(data);\n        }\n        link.setAttribute('href',url);\n        link.setAttribute('target', '_blank');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);        \n      },\n      /*preview: (path, data) => {\n        app.side(\n          {\n            onRender: ()=>{ \n              return <PreviewFrame name=\"app.component.PreviewFrame\" app={app} router={router} src={window.BASE_APP_PATH+path+'?data='+JSON.stringify(data)} height=\"100%\" width=\"45%\"/> \n            },\n            onClose: ()=>{\n            }\n          }\n        );                \n      },*/\n      prepQuery: (query, obj) => {\n        obj['$paging'] = {\n          page: query.page,\n          start: query.page * query.pageSize,\n          limit: query.pageSize\n        };\n  \n        if(query.orderBy!=undefined){\n          obj['$paging'].sort = query.orderBy.field;\n          obj['$paging'].dir = query.orderDirection.toUpperCase();\n        }\n        return obj;\n      },\n      prepResult: (query, p) => {\n        return {\n          data: (p.result.records) ? p.result.records : p.result,\n          page: query.page,\n          totalCount: (p.result.records) ? p.result.total : p.result.length\n        }\n      }    \n    },\n    setUser: (user) => {\n      setAppIsAuthenticated(true);\n      setAppUser(user);\n    },\n    getStyles: () => {\n      return classes;\n    },\n    side: (ctrl) => {\n      AppController.getInstance().getApp().sideHandle.setState({\n        open: true,\n        onRender: ctrl.onRender,\n        onClose: ctrl.onClose\n      });\n    },\n    pop: (type, name, label, value, dataProvider, setPopoverTarget, setPopoverCancel, selectData, multiSelect, dataMap, anchorEl) => {\n      var selectedIDs = {};\n      if(multiSelect){\n        for(var i=0;i<value.length;i++){\n          selectedIDs[value[i]] = dataMap[value[i]];\n        }\n      }else{\n        for(var i=0;i<dataProvider.length;i++){\n          if(dataProvider[i].id==value){\n            AppController.getInstance().getApp().popSelectHandle.setSelectedIndex(i);\n          }\n        }\n      }\n      AppController.getInstance().getApp().popSelectHandle.setState({\n        open: true,\n        type: type,\n        name: name,\n        label: label,\n        value: '',\n        lastValue: value,\n        multiSelect: (multiSelect) ? true: false,\n        selectedIDs: selectedIDs,\n        dataProvider: dataProvider,\n        setPopoverTarget: setPopoverTarget,\n        setPopoverCancel: setPopoverCancel,\n        selectData: selectData,\n        anchorEl: anchorEl\n      });\n    },\n    alert: (message, callback) => {\n      AppController.getInstance().getApp().alertHandle.setAppAlert({\n        title:'Proforma App',\n        open:true,\n        type:'ok',\n        message:message,\n        callback:callback\n      });\n    },\n    ask: (message, callback) => {\n      AppController.getInstance().getApp().alertHandle.setAppAlert({\n        title:'Proforma App',\n        open:true,\n        type:'yesno',\n        message:message,\n        callback:callback\n      });\n    },\n    delay: (cb,ms) => {\n      if(ms==undefined) ms = 1;\n      setTimeout(()=>{\n        cb();\n      },ms);      \n    },\n    encrypt: (secret) => {\n\t\t\tvar key = CryptoJS.enc.Utf8.parse(\"^LsUgH7J8}t;{9bp\");\n\t\t\tvar iv =  CryptoJS.enc.Utf8.parse(\"F3ZAF]YNw6[44ZX8\");\n\t\t\tvar encrypted = CryptoJS.AES.encrypt(secret, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7});\n\t\t\treturn encrypted.toString();\n\t\t}\n  });\n\n  useEffect(() => {\n    setRendered(true);\n    console.log('Viewport loaded');\n    return () => {\n      console.log('Viewport Unloaded');\n    };\n  },[]);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, appDrawerIsOpen && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          { appIsAuthenticated && <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"Open drawer\"\n              onClick={handleDrawerOpen}\n              className={clsx(classes.menuButton, appDrawerIsOpen && classes.menuButtonHidden)}\n            >\n              <MenuIcon />\n            </IconButton>}\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Pulse Feed Admin Console\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <HashRouter>\n        { appIsAuthenticated && <Drawer\n          variant=\"permanent\"\n          classes={{\n            paper: clsx(classes.drawerPaper, !appDrawerIsOpen && classes.drawerPaperClose),\n          }}\n          open={appDrawerIsOpen}\n        >\n          <div className={classes.toolbarIcon}>\n            <IconButton onClick={handleDrawerClose}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />    \n          <Route path=\"/\" component={(router) => appIsAuthenticated && appUser.role_id=='R-01' ? <NavigationForm app={app} router={router} user={appUser}/> : <div></div>} />            \n        </Drawer>\n        }\n        <main className={classes.content}>\n          <div className={classes.appBarSpacer} />\n          {\n            CoreRouter.getInstance().getPaths().map((field, index) => {\n              return <Route key={app.makeKey()} exact path={field.path} component={(router) => { return CoreRouter.getInstance().getComponent(appIsAuthenticated, field, app, router); } }/>\n            })\n          }\n        </main>\n      </HashRouter>\n      {rendered && <SideDrawer app={app}/>}\n      {rendered && <SelectPopover app={app}/>}\n      {rendered && <AppAlert app={app}/>}\n    </div>\n  );\n}","import React, { useEffect, useRef, useState, forwardRef } from 'react';\n\nimport SimpleForm from '~app-src/component/SimpleForm';\nimport SimpleTable from '~app-src/component/SimpleTable';\nimport Spacer from '~app-src/component/Spacer';\n\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Paper from \"@material-ui/core/Paper\";\nimport ProformaRequestForm from '~app-src/module/proforma/ProformaRequestForm';\n\nexport default function ProformaAppForm({app, name, router}) {\n  const classes = app.getStyles();\n  const formName = name;\n  const ref = useRef();\n  const [state, setState] = useState({});\n  const control = app.createControl(ref,state,formName);  \n  \n  const [statusProvider, setStatusProvider] = useState([]);\n\n  useEffect(()=>{\n    var isSubscribed = true;\n    app.registerForm(formName, control);\n    if(isSubscribed){\n      app.service.get(\n        '/bean/find/status',\n        (p) => {\n          if(p.success){\n            setStatusProvider(p.result);\n          }\n        }\n      );\n    }\n    return () => {\n      isSubscribed = false;\n      app.unregisterForm(formName);\n    }\n  },[]); \n\n  return (\n    <Container component=\"main\" ref={ref}>\n      <Spacer/>\n      <Paper elevation={1} className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Your Content\n        </Typography>\n        <Spacer/>\n        <SimpleForm\n          name={formName}\n          formKey=\"proformalist-form\"\n          control={control}\n          app={app}\n          mapping={{\n            schema: (rule) => {\n              return {\n                status: rule.string()\n              }\n            },\n            fields: [\n            ],\n            onSubmit: (values, formCtrl) => {\n              if(formCtrl.isValid()){\n                app.getForm(formName).findTable('proformalist-grid').refresh();\n              }\n              formCtrl.setSubmitting(false);\n            },\n            buttons: [\n              {label:'Search', variant:'contained', color:'primary', type:'submit', grid:{sm:2}},\n              {label:'Create', variant:'contained', color:'primary', grid:{sm:2}, onClick:(action, formCtrl)=>{\n                app.side(\n                  {\n                    onRender: ()=>{ return <ProformaRequestForm name=\"app.proforma.ProformaRequestForm\" app={app} router={router} mode=\"create\" providers={{statusProvider}}/> },\n                    onClose: ()=>{\n                      app.getForm(formName).findTable('proformalist-grid').refresh();\n                    }\n                  }\n                );\n              }}]              \n          }}          \n      ></SimpleForm>      \n      </Paper>\n      <Spacer/>\n      <SimpleTable \n        app={app}\n        name={formName}\n        control={control}\n        tableKey=\"proformalist-grid\"\n        columns={\n          [\n            { title: \"Date Created\", field: \"requestedon\"},\n          ]\n        }\n        options={{\n          padding:'dense',\n          sorting: true,\n          pageSize: 5,\n          pageSizeOptions: [5,10,25],\n          paging: true,\n          search: false\n        }}\n        data={\n          query =>\n            app.service.promise((resolve,reject)=>{\n              console.log('loading data');\n              var values = app.getForm(formName).getSearchValues();\n              var data = app.service.prepQuery(query, values);\n              app.service.post('/bean/search/proforma',data,(p)=>{\n                if(p.success){\n                  resolve(app.service.prepResult(query, p));\n                }else{\n                  reject();\n                }\n              });\n            })\n        }\n        actions={[\n          {\n            icon: app.icons.Edit,\n            tooltip: 'Edit',\n            onClick: (event, rowData) => {\n              app.side(\n                {\n                  onRender: ()=>{ \n                    var data = {...rowData}; \n                    console.log(data);\n                    delete data.tableData; \n                    return <ProformaRequestForm name=\"app.proforma.ProformaRequestForm\" app={app} router={router} mode=\"update\" rowData={data} providers={{statusProvider}}/> \n                  },\n                  onClose: ()=>{\n                    console.log('refreshing');\n                    app.getForm(formName).findTable('proformalist-grid').refresh();\n                  }\n                }\n              );                            \n            }\n          },\n          {\n            icon: app.icons.Assignment,\n            tooltip: 'Packinglist File',\n            onClick: (event, rowData) => {\n              app.service.download(rowData.packinglistfile);\n            }\n          },        \n          {\n            icon: app.icons.ViewList,\n            tooltip: 'Processed Packinglist File',\n            onClick: (event, rowData) => {\n              app.service.download('/bean/extract/packinglist?data='+JSON.stringify({'proforma_id':rowData.id}));\n            }\n          },\n          {\n            icon: app.icons.ViewList,\n            tooltip: 'Packinglist Report',\n            onClick: (event, rowData) => {\n              app.service.download('/bean/export/proformareport?data='+JSON.stringify({'proforma_id':rowData.id}));\n            }\n          },           \n          {\n            icon: app.icons.Delete,\n            tooltip: 'Delete',\n            onClick: (event, rowData) => {\n              app.ask(\"You want to delete \" + rowData.name, (reply)=>{\n                if(reply=='yes'){\n                  app.service.get('/bean/remove/proforma/'+rowData.id,(p)=>{\n                    if(p.success){\n                      app.notice.warning(p.message);\n                      app.getForm(formName).findTable('proformalist-grid').refresh();\n                    }else{\n                      app.alert(p.message);\n                    }\n                  });                  \n                }\n              });\n            }\n          }\n        ]}        \n        onRowClick={(event, rowData, togglePanel) => {\n          /*var formCtrl = app.getForm(formName);\n          formCtrl.setValues(rowData);\n          formCtrl.validate();*/\n        }}\n      />\n    <Spacer/>\n    </Container>\n  );\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport SimpleForm from '~app-src/component/SimpleForm';\r\nimport Spacer from '~app-src/component/Spacer';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ViewListIcon from '@material-ui/icons/ViewList';\r\n\r\nexport default function ProformaRequestForm({app, name, router, mode, rowData, providers}) {\r\n  const classes = app.getStyles();\r\n  const formName = name;\r\n  const ref = useRef();\r\n  const [state, setState] = useState((mode=='update' ? rowData : {status_id:'requested'}));\r\n  const control = app.createControl(ref,state,formName);\r\n\r\n  useEffect(()=>{\r\n    console.log('rowData',rowData);\r\n    app.registerForm(formName, control);\r\n    return () => {\r\n      app.unregisterForm(formName);\r\n    }\r\n  },[]); \r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\" ref={ref}>\r\n      <Spacer/>\r\n      <Card className={classes.titlecard}>\r\n        <CardHeader\r\n          action={\r\n            <IconButton aria-label=\"tools\" onClick={()=>{\r\n              app.service.download('/bean/template/packinglist',{});              \r\n            }}>\r\n              <ViewListIcon/>\r\n            </IconButton>\r\n          }\r\n          title=\"New Content\"\r\n        />         \r\n        <CardContent className={classes.paperCenter}>\r\n          <SimpleForm\r\n            name={formName}\r\n            formKey=\"request-form\"\r\n            control={control}\r\n            app={app}\r\n            mapping={{\r\n              schema: (rule) => {\r\n                return {\r\n                  packinglistfile: rule.string().required('field is required'),\r\n                  deliveryaddress1: rule.string(),\r\n                  deliveryaddress2: rule.string(),\r\n                  deliveryaddress3: rule.string(),\r\n                  deliveryaddress4: rule.string(),\r\n                  deliveryaddress5: rule.string(),\r\n                  termsofdelivery: rule.string(),\r\n                  shipper: rule.string(),\r\n                  pickuplocation: rule.string(),\r\n                  remarks: rule.string(),\r\n                  status_id: rule.string()\r\n                }\r\n              },\r\n              fields: [\r\n                {name:'id', cmp:'hidden'},\r\n                {name:'packinglistfile', label:'Select Media FIle', cmp:'fileupload'},\r\n                {name:'packinglisthash', label:'', cmp:'hidden'},\r\n                {name:'deliveryaddress1', label:'Title', cmp:'textfield'},\r\n                {name:'deliveryaddress2', label:'Description', cmp:'textfield'},\r\n                {name:'deliveryaddress3', label:'URL', cmp:'textfield'},\r\n                {name:'status_id', label:'Status', cmp:'search', dataProvider:providers.statusProvider, disabled:true}\r\n              ],\r\n              onSubmit: (values, formCtrl) => {\r\n                console.log(formCtrl.isValid());\r\n                formCtrl.setSubmitting(true);\r\n                var vo = app.getForm(formName).getFormValues();\r\n                vo.requestedon =  app.moment(new Date()).format('YYYY-MM-DD');\r\n                var data = vo;\r\n                if(formCtrl.isValid()){\r\n                  if(mode=='update'){\r\n                    data = app.getForm(formName).getFormData(vo);\r\n                    app.service.upload(\r\n                      '/bean/update/proforma',\r\n                      data,\r\n                      (p) => {\r\n                        formCtrl.setSubmitting(false);\r\n                        if(p.success){\r\n                          app.notice.info(p.message);\r\n                          app.sideHandle.close();\r\n                        }else{\r\n                          app.alert(p.message);\r\n                        }\r\n                      }\r\n                    );\r\n                  }else if(mode=='create'){\r\n                    delete vo.id;\r\n                    data = app.getForm(formName).getFormData(vo);\r\n                    app.service.upload(\r\n                      '/bean/create/proforma',\r\n                      data,\r\n                      (p) => {\r\n                        formCtrl.setSubmitting(false);\r\n                        if(p.success){\r\n                          app.notice.info(p.message);\r\n                          app.sideHandle.close();\r\n                        }else{\r\n                          app.alert(p.message);\r\n                        }\r\n                      }\r\n                    );\r\n                  }else{\r\n                    app.sideHandle.close();\r\n                  }\r\n                }else{\r\n                  formCtrl.setSubmitting(false);\r\n                }\r\n              },\r\n              buttons: [\r\n                {type:'submit', label:'Save', variant:'contained', color:'primary'},\r\n\r\n              ]              \r\n            }}\r\n            state={state}\r\n            setState={setState}        \r\n          ></SimpleForm>\r\n        </CardContent>\r\n      </Card>       \r\n    </Container>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { green, grey, red } from '@material-ui/core/colors';\n\nconst rawTheme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#FFE7F8',\n      main: '#ed1b2c',\n      dark: '#870000',\n    },\n    secondary: {\n      light: '#CED9E0',\n      main: '#68737a',\n      dark: '#020D14',\n    },\n    warning: {\n      main: '#ffc071',\n      dark: '#ffb25e',\n    },\n    error: {\n      xLight: red[50],\n      main: red[500],\n      dark: red[700],\n    },\n    success: {\n      xLight: green[50],\n      dark: green[700],\n    },\n  },\n  // typography: {\n  //   fontFamily: \"'Work Sans', sans-serif\",\n  //   fontSize: 14,\n  //   fontWeightLight: 300, // Work Sans\n  //   fontWeightRegular: 400, // Work Sans\n  //   fontWeightMedium: 700, // Roboto Condensed\n  //   fontFamilySecondary: \"'Roboto Condensed', sans-serif\",\n  // },  \n  typography: {\n    fontFamily: \"'FS Albert Web','Calibri','San Francisco Pro','Arial','sans-serif'\",\n    fontSize: 14,\n    fontWeightLight: 300, // Work Sans\n    fontWeightRegular: 400, // Work Sans\n    fontWeightMedium: 700, // Roboto Condensed\n    fontFamilySecondary: \"'FS Albert Web','SFMono-Regular','Menlo','Monaco','Consolas','Liberation Mono','Courier New','monospace'\",\n  },\n});\n\nconst fontHeader = {\n  color: rawTheme.palette.text.primary,\n  fontWeight: rawTheme.typography.fontWeightMedium,\n  fontFamily: rawTheme.typography.fontFamilySecondary,\n};\n\nconst theme = {\n  ...rawTheme,\n  palette: {\n    ...rawTheme.palette,\n    background: {\n      ...rawTheme.palette.background,\n      default: rawTheme.palette.common.white,\n      placeholder: grey[200],\n    },\n  },\n  typography: {\n    ...rawTheme.typography,\n    fontHeader,\n    h1: {\n      ...rawTheme.typography.h1,\n      ...fontHeader,\n      letterSpacing: 0,\n      fontSize: 60,\n    },\n    h2: {\n      ...rawTheme.typography.h2,\n      ...fontHeader,\n      fontSize: 48,\n    },\n    h3: {\n      ...rawTheme.typography.h3,\n      ...fontHeader,\n      fontSize: 42,\n    },\n    h4: {\n      ...rawTheme.typography.h4,\n      ...fontHeader,\n      fontSize: 36,\n    },\n    h5: {\n      ...rawTheme.typography.h5,\n      fontSize: 20,\n      fontWeight: rawTheme.typography.fontWeightLight,\n    },\n    h6: {\n      ...rawTheme.typography.h6,\n      ...fontHeader,\n      fontSize: 18,\n    },\n    subtitle1: {\n      ...rawTheme.typography.subtitle1,\n      fontSize: 18,\n    },\n    body1: {\n      ...rawTheme.typography.body2,\n      fontWeight: rawTheme.typography.fontWeightRegular,\n      fontSize: 16,\n    },\n    body2: {\n      ...rawTheme.typography.body1,\n      fontSize: 14,\n    },\n  },\n};\n\nexport default theme;"],"mappings":";;;;;;;;;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAbA;AACA;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AAFA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;AC5DA;;;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAKA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAXA;AACA;AACA;;;;;;AAfA;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAmBA;AACA;AAAA;AAAA;AACA;AAxBA;AA0BA;AACA;AA3BA;AAAA;AAAA;AACA;AADA;AA6BA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAnCA;AAAA;AAAA;AACA;AAoCA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7RA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAJA;AAUA;AACA;AAXA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAWA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAhEA;AAkEA;AACA;AACA;AACA;AACA;AACA;AAvEA;AAAA;AAAA;AACA;AADA;AA0EA;AACA;AACA;AACA;AACA;AACA;AA/EA;AAAA;AAAA;AACA;AADA;AAkFA;AACA;AACA;AACA;AACA;AACA;AAvFA;AAAA;AAAA;AACA;AADA;AA0FA;AACA;AACA;AACA;AACA;AACA;AA/FA;AAAA;AAAA;AACA;AADA;AAkGA;AACA;AAnGA;AAAA;AAAA;AACA;AADA;AAsGA;AACA;AAvGA;AAAA;AAAA;AACA;AADA;AA0GA;AACA;AACA;AACA;AACA;AACA;AA/GA;AAAA;AAAA;AACA;AADA;AAkHA;AACA;AACA;AACA;AACA;AACA;AACA;AAxHA;AAAA;AAAA;AACA;AADA;AA2HA;AACA;AA5HA;AAAA;AAAA;AACA;AA6HA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;AAQA;AACA;AAVA;AACA;AAWA;AACA;AACA;AACA;AACA;AAabA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;AC1HA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AACA;AAEA;AACA;AACA;;;AAoBA;AAAA;AACA;AADA;AACA;AADA;AAfA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAUA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AAxCA;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAQA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA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AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAOA;AAAA;AAPA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAfA;AAAA;AACA;AAeA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAazQA;AA2QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAXA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AA1HA;AA4HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA9jBA;AAikBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAGA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA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CA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAvEA;AA2EA;AACA;AAjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuFA;;;;;;;;;;;;ACjIA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AAKA;AACA,+BA8BA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AApBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AANA;AAlCA;AA4CA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;AAEA;AAEA;AACA;AAHA;AAFA;AAQA;AAEA;AACA;AAGA;AACA;AAJA;AAMA;AAGA;AAHA;AAKA;AAGA;AAHA;AAKA;AAGA;AAHA;AAKA;AAEA;AACA;AAHA;AAKA;AAGA;AAHA;AAKA;AAEA;AAFA;AAIA;AAEA;AACA;AAHA;AAKA;AAEA;AAFA;AA3CA;AAVA;AACA;AA2DA;;;;;;;;;;;;;;;;A","sourceRoot":""}